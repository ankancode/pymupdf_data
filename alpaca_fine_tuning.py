# -*- coding: utf-8 -*-
"""alpaca-fine-tuning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X85FLniXx_NyDsh_F_aphoIAy63DKQ7d
"""

# !nvidia-smi

"""## Preprocessing"""

# import pandas as pd

# df = pd.read_csv("BTC_Tweets_Updated.csv")

# df.head()

# df.sent_score.value_counts()

# df = df[["Date", "Tweet", "sent_score"]]
# df.columns = ["date", "tweet", "sentiment"]
# df.head()

# df = df[~df.tweet.str.contains("/t.co")]
# df = df[~df.tweet.str.startswith("RT")]

# df.to_csv("bitcoin-sentiment-tweets.csv", index=None)

# """## Setup"""

# !pip install -U pip
# !pip install accelerate==0.18.0
# !pip install appdirs==1.4.4
# !pip install bitsandbytes==0.37.2
# !pip install datasets==2.10.1
# !pip install fire==0.5.0
# !pip install git+https://github.com/huggingface/peft.git
# !pip install git+https://github.com/huggingface/transformers.git
# !pip install torch==2.0.0
# !pip install sentencepiece==0.1.97
# !pip install tensorboardX==2.6
# !pip install gradio==3.23.0

# Commented out IPython magic to ensure Python compatibility.
import transformers
import textwrap
from transformers import LlamaTokenizer, LlamaForCausalLM
import os
import sys
from typing import List

from peft import (
    LoraConfig,
    get_peft_model,
    get_peft_model_state_dict,
    prepare_model_for_int8_training,
)

import fire
import torch
from datasets import load_dataset
import pandas as pd

import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns
from pylab import rcParams
import json

# %matplotlib inline
sns.set(rc={'figure.figsize':(8, 6)})
sns.set(rc={'figure.dpi':100})
sns.set(style='white', palette='muted', font_scale=1.2)
os.environ["CUDA_VISIBLE_DEVICES"]="15"
DEVICE = "cuda:15" if torch.cuda.is_available() else "cpu"
print(DEVICE)
# exit()
import pandas as pd

# !gdown 1xQ89cpZCnafsW5T3G3ZQWvR7q682t2BN

"""## Data"""

df = pd.read_csv("bitcoin-sentiment-tweets.csv")
print(df.head())

df.shape

df.sentiment.value_counts()

df.sentiment.value_counts().plot(kind='bar');

def sentiment_score_to_name(score: float):
    if score > 0:
        return "Positive"
    elif score < 0:
        return "Negative"
    return "Neutral"

dataset_data = [
    {
        "instruction": "Detect the sentiment of the tweet.",
        "input": row_dict["tweet"],
        "output": sentiment_score_to_name(row_dict["sentiment"])
    }
    for row_dict in df.to_dict(orient="records")
]

dataset_data[0]

with open("alpaca-bitcoin-sentiment-dataset.json", "w") as f:
   json.dump(dataset_data, f)

"""## Alpaca LoRa"""

# BASE_MODEL = "decapoda-research/llama-7b-hf"
BASE_MODEL = "/home/kokil/ahmad/llms/ml-models/decapoda-research/llama-7b-hf"
print("reached0")

model = LlamaForCausalLM.from_pretrained(
    BASE_MODEL,
    load_in_8bit=True,
    torch_dtype=torch.float16,
    device_map="auto",
)

tokenizer = LlamaTokenizer.from_pretrained(BASE_MODEL)

tokenizer.pad_token_id = (
    0  # unk. we want this to be different from the eos token
)
tokenizer.padding_side = "left"

"""## Dataset"""

data = load_dataset("json", data_files="alpaca-bitcoin-sentiment-dataset.json")

data["train"]

CUTOFF_LEN = 256

def generate_prompt(data_point):    
    return f"""Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.  # noqa: E501
### Instruction:
{data_point["instruction"]}
### Input:
{data_point["input"]}
### Response:
{data_point["output"]}"""

def tokenize(prompt, add_eos_token=True):
    # there's probably a way to do this with the tokenizer settings
    # but again, gotta move fast
    result = tokenizer(
        prompt,
        truncation=True,
        max_length=CUTOFF_LEN,
        padding=False,
        return_tensors=None,
    )
    if (
        result["input_ids"][-1] != tokenizer.eos_token_id
        and len(result["input_ids"]) < CUTOFF_LEN
        and add_eos_token
    ):
        result["input_ids"].append(tokenizer.eos_token_id)
        result["attention_mask"].append(1)

    result["labels"] = result["input_ids"].copy()

    return result

def generate_and_tokenize_prompt(data_point):
    full_prompt = generate_prompt(data_point)
    tokenized_full_prompt = tokenize(full_prompt)
    return tokenized_full_prompt

train_val = data["train"].train_test_split(
    test_size=200, shuffle=True, seed=42
)
train_data = (
    train_val["train"].shuffle().map(generate_and_tokenize_prompt)
)
val_data = (
    train_val["test"].shuffle().map(generate_and_tokenize_prompt)
)

LORA_R = 8
LORA_ALPHA = 16
LORA_DROPOUT= 0.05
LORA_TARGET_MODULES = [
    "q_proj",
    "v_proj",
]

BATCH_SIZE = 128
MICRO_BATCH_SIZE = 4
GRADIENT_ACCUMULATION_STEPS = BATCH_SIZE // MICRO_BATCH_SIZE
LEARNING_RATE = 3e-4
TRAIN_STEPS = 300
OUTPUT_DIR = "experiments"
print("reached1")
model = prepare_model_for_int8_training(model)
config = LoraConfig(
    r=LORA_R,
    lora_alpha=LORA_ALPHA,
    target_modules=LORA_TARGET_MODULES,
    lora_dropout=LORA_DROPOUT,
    bias="none",
    task_type="CAUSAL_LM",
)
model = get_peft_model(model, config)
model.print_trainable_parameters()

"""## Training"""

training_arguments = transformers.TrainingArguments(
    per_device_train_batch_size=MICRO_BATCH_SIZE,
    gradient_accumulation_steps=GRADIENT_ACCUMULATION_STEPS,
    warmup_steps=100,
    max_steps=TRAIN_STEPS,
    learning_rate=LEARNING_RATE,
    fp16=True,
    logging_steps=10,
    optim="adamw_torch",
    evaluation_strategy="steps",
    save_strategy="steps",
    eval_steps=50,
    save_steps=50,
    output_dir=OUTPUT_DIR,
    save_total_limit=3,
    load_best_model_at_end=True,
    report_to="tensorboard" 
)

data_collator = transformers.DataCollatorForSeq2Seq(
    tokenizer, pad_to_multiple_of=8, return_tensors="pt", padding=True
)

trainer = transformers.Trainer(
    model=model,
    train_dataset=train_data,
    eval_dataset=val_data,
    args=training_arguments,
    data_collator=data_collator
)
model.config.use_cache = False
old_state_dict = model.state_dict
model.state_dict = (
    lambda self, *_, **__: get_peft_model_state_dict(
        self, old_state_dict()
    )
).__get__(model, type(model))

model = torch.compile(model)

trainer.train()
model.save_pretrained(OUTPUT_DIR)

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir experiments/runs

from huggingface_hub import notebook_login

notebook_login()

model.push_to_hub("curiousily/alpaca-bitcoin-tweets-sentiment", use_auth_token=True)

"""## Inference"""

# Commented out IPython magic to ensure Python compatibility.
# !git clone https://github.com/tloen/alpaca-lora.git
# # %cd alpaca-lora
# !git checkout a48d947

# !python generate.py \
#     --load_8bit \
#     --base_model 'decapoda-research/llama-7b-hf' \
#     --lora_weights 'curiousily/alpaca-bitcoin-tweets-sentiment' \
#     --share_gradio

"""## References
 - [Bitcoin Sentiment Dataset](https://www.kaggle.com/datasets/aisolutions353/btc-tweets-sentiment)
"""